const portfinder = require('portfinder');
const chokidar = require('chokidar');
const fetch = require('node-fetch');
const { startServer, createConfig } = require('es-dev-server');

const regexpKarmaLoaded = /window\.__karma__\.loaded\(\);/gm;
const regexpScriptSrcGlobal = /<script type="module"[^>]*src="([^"]*)"/gm;
const regexpScriptSrc = /<script type="module"[^>]*src="([^"]*)"/m;

/**
 * Fetches the original test HTML file from karma and injects code to ensure all tests
 * are loaded before running karma.
 * @param {string} karmaHost
 * @param {string} name
 * @returns {Promise<{ body: string}>}
 */
async function fetchKarmaHTML(karmaHost, name) {
  // fetch the original html source from karma, so that it injects test files
  // @ts-ignore
  const response = await fetch(`${karmaHost}/${name}.html?bypass-es-dev-server`);
  let body = await response.text();

  // disable default karma loaded call
  body = body.replace(
    regexpKarmaLoaded,
    '// disabled by karma-esm\n // window.__karma__.loaded();',
  );

  // extract all test file sources
  const matches = body.match(regexpScriptSrcGlobal);
  const srcPaths = matches
    .map(match => match.match(regexpScriptSrc)[1])
    .filter(path => typeof path === 'string');

  // inject module which imports all test files, and then calls karma loaded.
  // this ensures that when running in compatibility mode all tests are properly
  // imported before starting karma
  body = body.replace(
    '</body>',
    `<script type="module">
      // generated by karma-esm to ensure all tests are loaded before running karma
      // in compatibility mode
      ${srcPaths.map(path => `import '${path}';\n`).join('')}
      window.__karma__.loaded();
    </script>`,
  );
  return { body };
}

/**
 * Serves karma test HTML from es-dev-server. The actual HTML is requested from karma itself,
 * so that karma can inject test files and libraries. Then it goes through the regular
 * es-dev-server serving logic, so that modules are resolved and babel or compatibility mode
 * can process the html and test files.
 */
function createServeKarmaHtml(karmaHost) {
  return async function serveKarmaHtml({ url }) {
    if (url.startsWith('/context.html')) {
      return fetchKarmaHTML(karmaHost, 'context');
    }

    if (url.startsWith('/debug.html')) {
      return fetchKarmaHTML(karmaHost, 'debug');
    }

    return null;
  };
}

async function setupDevServer(karmaConfig, esmConfig, watch, babelConfig, karmaEmitter) {
  const devServerPort =
    typeof esmConfig.port === 'number' ? esmConfig.port : await portfinder.getPortPromise();
  const karmaHost = `${karmaConfig.protocol}//${karmaConfig.listenAddress}:${karmaConfig.port}`;
  const devServerHost = `${karmaConfig.protocol}//${karmaConfig.listenAddress}:${devServerPort}`;

  const esDevServerConfig = createConfig({
    port: devServerPort,
    hostname: karmaConfig.listenAddress,
    rootDir: karmaConfig.basePath,
    nodeResolve: esmConfig.nodeResolve,
    compatibility: esmConfig.compatibility,
    // option used to be called `moduleDirectories`
    // @ts-ignore
    moduleDirs: esmConfig.moduleDirs || esmConfig.moduleDirectories,
    babel: esmConfig.babel,
    fileExtensions: esmConfig.fileExtensions,
    babelModernExclude: esmConfig.babelModernExclude,
    babelExclude: esmConfig.babelExclude,
    // option used to be called `customMiddlewares`
    // @ts-ignore
    middlewares: esmConfig.middlewares || esmConfig.customMiddlewares,
    preserveSymlinks: esmConfig.preserveSymlinks,
    responseTransformers: [createServeKarmaHtml(karmaHost)],
    watch: false,
    babelConfig,
  });

  let fileWatcher = chokidar.watch([]);
  let { server } = await startServer(esDevServerConfig, fileWatcher);

  if (watch) {
    fileWatcher.addListener('change', () => {
      karmaEmitter.refreshFiles();
    });
  }

  ['exit', 'SIGINT'].forEach(event => {
    // @ts-ignore
    process.on(event, () => {
      console.log('exit process');
      if (fileWatcher) {
        fileWatcher.close();
        fileWatcher = null;
      }

      if (server) {
        server.close();
        server = null;
      }
    });
  });

  return devServerHost;
}

module.exports = setupDevServer;
